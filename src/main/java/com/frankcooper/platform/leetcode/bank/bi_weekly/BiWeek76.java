package com.frankcooper.platform.leetcode.bank.bi_weekly;

import org.junit.Assert;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class BiWeek76 {

    static class _1st {
        public static void main(String[] args) {
            _1st handler = new _1st();
        }

        public int findClosestNumber(int[] nums) {
            int res = 100010;
            for (int x : nums) {
                if (Math.abs(x) < Math.abs(res)) {
                    res = x;
                } else if (Math.abs(x) == Math.abs(res) && res < x) {
                    res = x;
                }
            }
            return res;
        }


    }

    static class _2nd {
        public static void main(String[] args) {
            _2nd handler = new _2nd();
            int total = 20, cost1 = 10, cost2 = 5;
            Assert.assertEquals(9, handler.waysToBuyPensPencils(total, cost1, cost2));
        }

        public long waysToBuyPensPencils(int total, int cost1, int cost2) {
            long ways = 0;
            for (int i = 0; i <= total / cost1; i++) {
                int remain = total - cost1 * i;
                ways += 1 + remain / cost2;
            }
            return ways;
        }
    }


    static class _3rd {
        public static void main(String[] args) {
            _3rd handler = new _3rd();
            String[] ops = new String[]{"ATM", "deposit", "withdraw", "deposit", "withdraw", "withdraw"};
//            String[][] nums =new String[] {{}, {{0, 0, 1, 2, 1}}, {600}, {{0, 1, 0, 1, 1}}, {600}, {550}}
            int[] nums_0 = new int[]{};
            int[] nums_1 = new int[]{0, 0, 1, 2, 1};
            int[] nums_2 = new int[]{600};
            int[] nums_3 = new int[]{0, 1, 0, 1, 1};
            int[] nums_4 = new int[]{600};
            int[] nums_5 = new int[]{550};
            int[][] nums = new int[][]{nums_0, nums_1, nums_2, nums_3, nums_4, nums_5};
            ATM atm = new ATM();
            for (int i = 0; i < ops.length; i++) {
                if (ops[i].equals("ATM")) atm = new ATM();
                else if (ops[i].equals("deposit")) {
                    atm.deposit(nums[i]);
                } else if (ops[i].equals("withdraw")) {
                    int[] res = atm.withdraw(nums[i][0]);
                    System.out.println(Arrays.toString(res));
                }
            }


        }

        //WA
        static class ATM {

            long[] counter;
            long[] money;

            public ATM() {
                //0-5 分别表示 20 50 100 200 500的面额的数量
                counter = new long[5];
                money = new long[]{20, 50, 100, 200, 500};
            }


            public void deposit(int[] banknotesCount) {
                for (int i = 0; i < banknotesCount.length; i++) {
                    counter[i] += banknotesCount[i];
                }
            }

            public int[] withdraw(int amount) {
                long[] res = new long[5];
                long[] t = Arrays.copyOf(counter, counter.length);
                for (int i = money.length - 1; i >= 0; i--) {
                    long cnt = amount / money[i];
                    if (cnt != 0 && t[i] >= cnt) {
                        t[i] -= cnt;
                        res[i] = cnt;
                        amount -= money[i] * cnt;
                    }
                    if (amount == 0) {
                        counter = t;
                        return Arrays.stream(res).mapToInt(x -> (int) x).toArray();
                    }

                }
                return new int[]{-1};
            }
        }
    }

    static class _3rd_1 {
        class ATM {
            //面值
            long[] banknotes = new long[]{20, 50, 100, 200, 500};
            long[] counter;//每种面值的计数器

            public ATM() {
                counter = new long[5];
            }

            public void deposit(int[] banknotesCount) {
                for (int i = 0; i < banknotesCount.length; i++) {
                    counter[i] += banknotesCount[i];
                }
            }

            public int[] withdraw(int amount) {
                long[] res = new long[5];
                int idx = 4;//从大到小的元素面值的索引
                while (amount > 0 && idx >= 0) {
                    //拿走该面值的数量
                    long cnt = Math.min(amount / banknotes[idx], counter[idx]);
                    res[idx] = cnt;
                    amount -= cnt * banknotes[idx];
                    idx--;
                }
                if (amount != 0) return new int[]{-1};
                else {
                    for (int i = 0; i < res.length; i++) {
                        counter[i] -= res[i];
                    }
                    return Arrays.stream(res).mapToInt(i -> (int) i).toArray();
                }

            }
        }

    }


    //TLE
    static class _4th {
        /**
         * [89801,78536,17753,11636,2498,57831,24156,72348,7671,81629,92954,19660,84137,75212,73934,36320,20909,16373,95646,74189,5731,2356,75095,96163,85687,71542,80803,91302,64548,23376,32704,78818,73015,21438,94137,72902,59965,75397,69036,26407,3231,38011,81990,96650,61719,26662,77800,62946,55072,67683,59999,22112,94695,6894,73443,99473,46633,28700,39547,26808,91137,29113,24437,87866,30420,22560,92967,11813,81873,53547,45759,97925,48616,50948,95646,84748,3493,73072,89181,94831,44563,13596,79477,83158,57869,86506,50172,15352,46364,45893,8823,6947,1746,75318,11263,71316,53485,51176,72099,81145]
         * [[3,34],[63,24],[21,70],[28,13],[37,39],[43,74],[59,78],[24,6],[18,21],[7,63],[18,36],[0,94],[37,30],[96,48],[73,24],[28,96],[50,58],[47,7],[32,99],[55,0],[44,2],[35,2],[83,80],[54,38],[28,8],[24,5],[5,91],[26,59],[55,71],[65,72],[89,76],[62,23],[77,74],[51,66],[70,59],[29,97],[3,42],[53,62],[70,13],[33,95],[53,25],[50,55],[72,51],[74,38],[26,75],[96,43],[42,28],[36,79],[40,99],[62,79],[66,50],[96,15],[61,78],[62,38],[46,76],[47,92],[53,57],[44,91],[78,28],[31,11],[22,69],[54,59],[93,87],[71,0],[93,37],[86,31],[24,87],[23,95],[98,41],[86,40],[67,1],[76,91],[25,50],[34,10],[74,87],[86,97],[3,4],[61,67],[68,78],[38,82],[61,18],[93,82],[48,62],[47,70],[6,34],[89,69],[23,71],[99,62],[14,34],[63,54],[63,3],[75,65],[12,96],[99,15],[70,31],[38,13],[42,15],[30,57],[83,15],[74,39],[36,91],[99,7],[60,46],[83,69],[38,96],[78,76],[33,69],[93,21],[88,15],[34,37],[64,48],[88,46],[37,14],[99,19],[61,79],[47,75],[88,81],[79,11],[8,25],[80,32],[17,26],[19,69],[3,83],[49,84],[45,49],[56,2],[41,33],[9,10],[74,69],[73,3],[22,18],[37,54],[21,88],[48,49],[37,99],[72,2],[49,64],[30,15],[68,39],[67,92],[53,46],[49,18],[67,46],[24,76],[91,81],[17,68],[54,4],[1,91],[16,51],[65,95],[52,56],[89,23],[22,71],[35,23],[80,8],[79,35],[22,63],[42,25],[81,93],[29,95],[15,71],[41,99],[93,72],[86,56],[35,43],[1,77],[3,40],[39,31],[31,5],[17,54],[96,73],[44,8],[25,71],[12,74],[88,76],[66,38],[14,73],[61,7],[17,65],[86,34],[40,77],[2,37],[65,48],[18,94],[12,61],[93,80],[13,47],[2,62],[26,4],[93,50],[59,65],[85,31],[43,11],[32,66],[16,93],[38,8],[96,49],[37,86],[67,96],[16,66],[98,52],[84,98],[29,67],[15,94],[32,2],[70,68],[41,9],[58,3],[60,28],[4,71],[91,96],[67,16],[87,94],[5,14],[51,78],[31,64],[90,54],[24,39],[32,4],[55,21],[44,70],[92,11],[73,95],[95,92],[89,9],[21,28],[3,66],[73,71],[26,11],[24,23],[46,30],[50,52],[17,61],[8,46],[86,0],[10,98],[90,26],[2,5],[49,57],[62,50],[76,22],[90,83],[8,42],[48,29],[75,64],[91,48],[80,3],[82,92],[1,69],[10,77],[45,54],[49,2],[81,48],[90,61],[8,99],[47,11],[34,56],[1,95],[67,10],[7,92],[94,76],[21,9],[85,15],[99,5],[98,15],[51,9],[10,75],[25,89],[16,2],[88,90],[13,11],[23,64],[37,80],[70,50],[49,22],[42,0],[59,68],[55,89],[74,66],[8,66],[13,57],[59,76],[28,30],[8,52],[56,39],[50,59],[97,64],[35,49],[97,95],[87,21],[96,39],[54,48],[19,66],[73,69],[55,30],[33,28],[95,60],[56,85],[97,30],[40,33],[75,80],[46,52],[78,23],[37,66],[54,94],[89,8],[97,26],[45,23],[15,0],[29,89],[1,13],[12,84],[84,43],[8,86],[11,39],[93,45],[9,28],[3,16],[86,90],[93,92],[95,2],[56,19],[45,38],[64,61],[57,34],[15,75],[34,26],[15,3],[19,68],[88,8],[98,59],[59,28],[64,51],[44,52],[78,71],[29,1],[37,94],[45,72],[4,8],[0,4],[36,54],[73,10],[8,72],[5,49],[75,76],[78,27],[24,36],[91,10],[95,93],[49,92],[8,51],[99,44],[36,46],[47,21],[99,3],[29,37],[59,72],[95,88],[0,54],[47,31],[90,40],[54,46],[76,56],[79,40],[57,48],[58,40],[63,2],[62,0],[61,84],[69,96],[49,80],[19,96],[62,17],[59,67],[63,1],[96,26],[41,84],[70,2],[65,96],[82,20],[93,28],[98,99],[47,81],[56,16],[98,74],[38,69],[42,79],[67,69],[21,35],[17,94],[95,38],[66,46],[96,99],[51,44],[69,6],[7,73],[77,24],[65,49],[59,45],[30,24],[27,3],[74,35],[16,52],[81,19],[15,63],[5,84],[93,19],[19,83],[7,12],[80,71],[75,90],[77,7],[12,43],[95,24],[24,9],[11,30],[81,38],[10,40],[91,16],[82,15],[65,16],[9,19],[36,47],[77,29],[72,83],[46,73],[29,38],[54,98],[73,35],[86,69],[62,90],[4,20],[33,70],[96,74],[71,95],[39,83],[74,94],[36,25],[99,76],[25,92],[61,95],[7,78],[6,29],[21,32],[25,44],[30,9],[68,97],[34,95],[95,43],[49,34],[16,92],[7,26],[71,43],[63,94],[72,41],[19,11],[42,38],[33,90],[97,75],[1,16],[7,11],[9,44],[8,81],[0,41],[3,19],[82,90],[25,90],[49,44],[69,8],[1,90],[76,93],[19,12],[70,58],[22,45],[70,19],[53,2],[35,19],[85,5],[46,51],[18,82],[12,90],[70,51],[84,7],[80,25],[70,23],[37,9],[32,15],[6,3],[46,91],[93,24],[64,9],[14,30],[39,86],[24,41],[17,76],[72,39],[71,45],[29,31],[62,66],[91,70],[62,18],[48,22],[10,96],[37,84],[54,53],[65,33],[70,36],[98,8],[4,18],[41,78],[57,59],[54,39],[31,20],[54,57],[74,18],[84,91],[58,25],[58,66],[81,75],[38,3],[90,0],[45,79],[10,7],[12,53],[75,71],[55,61],[39,82],[78,58],[60,84],[4,90],[75,59],[45,16],[84,70],[76,18],[22,41],[42,57],[97,40],[69,60],[23,74],[90,35],[14,57],[14,16],[36,63],[59,49],[23,48],[75,73],[26,87],[52,59],[40,69],[5,83],[28,35],[99,30],[75,8],[9,73],[14,4],[65,10],[56,6],[63,87],[39,55],[37,10],[96,25],[85,54],[11,70],[23,93],[83,96],[56,23],[21,42],[58,88],[32,36],[22,26],[25,33],[68,42],[76,6],[86,9],[45,2],[5,72],[87,57],[93,75],[56,24],[74,53],[67,34],[95,76],[79,43],[89,43],[85,76],[9,29],[82,63],[61,94],[60,81],[42,40],[80,4],[67,11],[35,92],[2,99],[81,96],[97,45],[53,1],[46,56],[62,13],[51,14],[14,87],[87,65],[51,5],[54,81],[63,93],[68,90],[84,22],[73,48],[17,58],[34,28],[63,88],[26,20],[99,73],[17,49],[46,31],[8,90],[99,69],[65,94],[31,93],[56,75],[29,4],[86,95],[29,10],[84,71],[92,64],[89,26],[81,7],[59,22],[85,74],[67,97],[66,89],[21,29],[66,41],[68,27],[60,44],[51,52],[19,92],[1,19],[62,74],[55,23],[53,4],[12,94],[70,95],[20,65],[87,6],[77,81],[32,12],[85,29],[72,37],[37,64],[78,14],[89,6],[37,89],[53,49],[53,36],[62,11],[57,8],[0,8],[43,92],[36,48],[33,77],[78,21],[69,84],[92,2],[16,69],[36,96],[70,42],[71,93],[74,36],[82,85],[61,73],[83,31],[14,42],[65,39],[6,81],[40,75],[49,99],[69,66],[82,57],[95,7],[18,26],[10,74],[85,52],[61,37],[54,65],[21,63],[73,88],[67,99],[52,80],[23,18],[84,77],[94,26],[70,49],[67,91],[2,51],[44,6],[38,11],[10,70],[2,88],[13,34],[61,2],[19,28],[27,19],[84,25],[28,11],[31,82],[84,89],[97,31],[37,36],[67,94],[5,23],[52,65],[6,22],[69,11],[9,56],[78,45],[17,40],[43,53],[20,45],[20,7],[62,63],[85,7],[9,46],[31,99],[50,97],[53,65],[57,39],[8,34],[62,76],[7,68],[90,65],[5,56],[81,55],[5,29],[2,94],[32,22],[25,22],[39,61],[43,45],[28,52],[23,75],[78,42],[58,38],[84,81],[82,48],[78,17],[77,80],[23,50],[31,89],[58,48],[10,32],[19,80],[44,39],[47,76],[68,93],[14,28],[96,60],[91,88],[96,44],[25,78],[53,79],[38,36],[38,64],[69,18],[17,34],[3,95],[99,77],[93,46],[14,55],[30,81],[28,41],[42,27],[57,11],[67,76],[72,34],[39,50],[50,19],[42,52],[1,9],[89,77],[49,6],[44,53],[42,2],[65,98],[5,81],[94,99],[50,78],[11,49],[34,12],[39,42],[25,74],[99,80],[80,62],[73,4],[50,99],[54,44],[65,3],[5,74],[17,57],[54,24],[15,5],[7,5],[1,83],[17,21],[23,36],[85,99],[35,59],[41,96],[15,91],[55,26],[43,69],[33,93],[99,39],[86,92],[52,35],[71,61],[16,41],[51,48],[82,29],[13,4],[42,67],[72,62],[30,26],[42,51],[83,25],[65,22],[75,45],[89,51],[31,13],[22,51],[28,20],[45,56],[52,9],[13,56],[1,22],[89,21],[85,57],[69,9],[77,92],[17,37],[93,30],[97,87],[60,5],[92,27],[84,87],[28,99],[97,52],[89,85],[32,90],[37,71],[72,14],[6,98],[82,61],[37,4],[2,96],[41,19],[93,57],[84,1],[32,17],[77,75],[85,18],[3,69],[14,70],[0,48],[37,75],[61,60],[28,57],[2,77],[24,8],[56,57],[0,72],[94,23],[99,42],[46,65],[80,0],[59,14],[28,40],[4,62],[88,42],[20,56],[64,35],[24,12],[51,40],[8,36],[28,45],[52,60],[67,21],[75,79],[68,51],[10,54],[53,95],[49,41],[95,28],[66,42],[62,7],[46,38],[22,36],[91,41],[10,17],[77,27],[91,51],[20,99],[41,89],[68,57],[85,49],[98,37],[10,90],[76,42],[0,19],[19,43],[97,66],[39,93],[76,64],[48,95],[16,44],[1,50],[49,62],[91,95],[80,44],[5,1],[82,51],[51,95],[91,9],[40,80],[80,48],[79,38],[68,31],[98,77],[50,27],[20,58],[68,28],[95,46],[52,69],[71,65],[24,22],[1,32],[72,11],[7,19],[61,30],[81,68],[5,35],[18,60],[95,99],[3,76],[37,57],[63,12],[47,48],[85,72],[48,90],[2,18],[65,47],[93,41],[36,73],[98,90],[64,67],[12,60],[21,51],[10,83],[10,28],[59,0],[9,76],[50,85],[17,69],[61,96],[25,47],[50,26],[48,4],[64,66],[51,25],[70,86],[7,72],[24,75],[89,14],[19,48],[61,63],[92,36],[6,15],[92,88],[74,46],[11,36],[7,36],[66,53],[44,50],[67,73],[8,6],[18,95],[25,72],[84,19],[20,91],[66,67],[48,59],[84,72],[18,16],[0,68],[0,6],[81,90],[17,39],[78,54],[62,68],[80,76],[45,7],[69,64],[15,55],[15,51],[93,29],[7,27],[54,28],[61,16],[41,2],[89,52],[77,43],[37,70],[3,52],[56,54],[74,99],[17,15],[84,66],[50,41],[12,37],[81,71],[21,19],[7,35],[89,75],[42,56],[79,71],[71,74],[62,5],[18,39],[57,5],[38,83],[46,61],[25,3],[96,79],[36,4],[51,10],[94,77],[98,21],[13,35],[12,16],[4,27],[6,94],[61,91],[74,19],[88,49],[32,56],[35,29],[64,45],[70,0],[87,85],[71,18],[74,27],[71,62],[3,29],[64,59],[36,17],[5,59],[15,1],[42,53],[83,79],[2,19],[66,25],[1,3],[28,6],[13,14],[78,57],[24,34],[16,75],[32,20],[36,52],[72,69],[42,37],[92,66],[43,97],[68,67],[40,53],[6,67],[92,69],[4,97],[22,4],[55,44],[82,99],[64,5],[91,26],[76,44],[98,55],[56,44],[35,55],[60,24],[37,15],[40,64],[43,72],[63,90],[8,87],[88,80],[78,92],[63,60],[91,65],[19,26],[90,13],[3,88],[86,73],[63,39],[10,62],[51,7],[69,12],[39,47],[4,19],[38,2],[81,95],[92,71],[73,55],[86,61],[78,32],[37,90],[50,49],[54,50],[33,94],[49,23],[73,43],[66,82],[35,36],[15,20],[98,35],[86,35],[18,78],[44,74],[40,6],[30,84],[75,17],[1,88],[90,34],[29,39],[58,75],[97,3],[28,86],[19,55],[98,45],[98,88],[63,4],[6,99],[70,48],[16,82],[64,70],[9,59],[76,63],[49,3],[95,54],[64,47],[75,9],[84,85],[96,95],[5,33],[9,42],[77,79],[70,77],[99,12],[18,90],[30,70],[22,9],[37,38],[86,77],[0,81],[85,20],[25,38],[92,28],[93,64],[44,94],[43,67],[7,4],[71,82],[30,35],[17,6],[76,90],[46,57],[69,2],[44,10],[57,12],[29,59],[19,29],[56,88],[71,19],[97,73],[71,12],[86,53],[48,13],[22,31],[15,10],[45,82],[13,25],[98,70],[58,2],[52,25],[46,40],[3,62],[44,73],[24,88],[16,95],[35,20],[27,97],[17,53],[28,12],[68,43],[96,82],[25,94],[94,90],[31,45],[43,21],[86,17],[47,79],[67,30],[66,18],[45,4],[9,7],[1,57],[48,20],[75,38],[20,14],[17,83],[15,4],[21,86],[15,40],[48,76],[46,71],[36,68],[53,10],[68,95],[31,36],[24,62],[14,18],[68,37],[19,88],[8,22],[67,56],[13,73],[37,48],[83,51],[30,6],[49,29],[97,80],[99,81],[47,38],[34,2],[70,34],[29,74],[88,23],[3,30],[32,31],[11,55],[79,88],[70,32],[59,25],[96,55],[8,41],[59,37],[93,10],[41,14],[77,69],[36,2],[62,61],[81,82],[36,58],[57,71],[79,68],[14,83],[42,33],[45,46],[48,27],[22,85],[70,94],[83,43],[84,35],[85,59],[89,94],[52,39],[23,47],[27,91],[60,67],[99,58],[12,42],[77,19],[66,68],[65,60],[83,88],[66,36],[20,41],[92,44],[93,56],[72,70],[87,88],[37,85],[46,79],[99,66],[70,43],[19,58],[21,48],[45,12],[20,38],[46,13],[69,91],[17,3],[43,66],[32,0],[86,16],[92,60],[5,22],[39,33],[55,28],[79,82],[72,95],[40,13],[61,83],[73,26],[69,15],[6,18],[26,14],[67,47],[31,77],[16,38],[39,60],[27,35],[84,13],[95,58],[92,10],[55,77],[20,27],[64,25],[7,38],[74,16],[29,16],[17,67],[21,2],[47,30],[11,40],[10,50],[46,43],[79,65],[74,97],[47,56],[82,49],[50,13],[29,11],[6,51],[20,67],[10,88],[22,62],[94,79],[88,75],[93,36],[7,46],[32,59],[74,95],[97,85],[41,44],[89,87],[80,91],[45,14],[69,65],[70,52],[84,16],[51,33],[29,55],[86,41],[6,86],[76,79],[14,7],[72,75],[15,79],[93,58],[29,76],[75,7],[10,97],[67,95],[0,60],[37,56],[31,2],[9,98],[17,8],[41,69],[27,33],[64,10],[91,82],[85,0],[31,18],[5,90],[78,69],[86,45],[96,58],[74,42],[56,99],[29,14],[30,31],[85,38],[74,72],[34,74],[47,51],[68,13],[83,46],[32,86],[60,82],[56,11],[29,98],[64,89],[78,63],[67,49],[85,32],[74,0],[59,4],[24,40],[94,72],[3,61],[69,4],[64,99],[18,28],[88,53],[79,21],[76,14],[70,78],[98,60],[42,49],[24,59],[12,22],[88,39],[10,14],[54,15],[16,85],[80,33],[9,55],[46,26],[6,55],[87,70],[1,93],[25,61],[61,59],[53,73],[94,56],[50,71],[85,36],[94,55],[68,54],[37,51],[5,41],[68,4],[53,26],[39,4],[23,67],[36,87],[83,53],[98,2],[48,78],[37,20],[23,3],[42,64],[5,11],[2,6],[33,66],[0,82],[55,33],[25,45],[55,91],[72,30],[33,99],[31,23],[16,43],[72,63],[69,93],[72,80],[98,1],[33,22],[2,64],[67,13],[8,21],[98,46],[13,20],[96,34],[57,10],[58,92],[96,50],[52,71],[11,75],[56,31],[86,44],[48,89],[29,90],[59,71],[47,88],[84,99],[48,69],[47,94],[57,40],[69,76],[15,73],[31,9],[53,9],[29,53],[60,70],[66,0],[14,63],[93,8],[10,35],[52,54],[69,20],[51,41],[15,93],[59,3],[66,90],[82,21],[23,63],[86,82],[12,38],[93,66],[91,49],[27,29],[16,21],[76,72],[23,0],[96,22],[50,68],[59,81],[37,91],[76,21],[36,81],[82,3],[96,51],[1,12],[34,87],[91,77],[91,38],[78,52],[14,8],[86,93],[36,40],[6,53],[72,17],[36,71],[8,60],[18,46],[23,14],[21,49],[47,0],[31,44],[75,85],[63,44],[66,22],[11,95],[23,73],[88,70],[83,52],[54,93],[48,8],[54,27],[24,50],[53,72],[89,93],[71,99],[82,72],[16,89],[52,81],[82,55],[59,19],[86,30],[51,88],[99,93],[80,57],[80,38],[38,71],[45,27],[80,34],[95,78],[85,48],[4,43],[78,81],[47,1],[8,83],[67,18],[2,14],[41,95],[30,96],[92,94],[15,14],[73,42],[3,43],[52,55],[5,79],[60,71],[77,50],[13,51],[98,92],[30,64],[81,12],[12,89],[17,23],[82,75],[31,33],[52,92],[13,37],[45,85],[10,89],[93,44],[23,86],[96,85],[59,40],[36,34],[16,90],[9,13],[70,16],[72,23],[74,70],[64,74],[20,70],[50,43],[46,48],[38,76],[12,95],[63,45],[66,52],[97,13],[20,6],[92,97],[28,84],[35,26],[8,84],[88,57],[57,90],[96,20],[51,35],[27,6],[43,85],[93,67],[53,78],[75,78],[2,79],[23,11],[87,13],[37,49],[71,85],[82,19],[91,64],[46,86],[68,41],[22,53],[67,78],[29,18],[68,86],[82,89],[99,75],[2,83],[30,40],[84,62],[36,95],[58,74],[10,1],[43,94],[64,0],[42,17],[5,88],[79,58],[77,12],[98,3],[36,27],[82,83],[73,37],[70,83],[45,11],[94,1],[78,80],[86,78],[18,88],[95,87],[2,46],[73,19],[79,66],[78,6],[68,82],[77,39],[59,97],[9,12],[35,89],[31,60],[36,10],[6,95],[24,80],[1,75],[17,56],[32,6],[13,80],[89,91],[46,87],[34,48],[88,78],[6,26],[81,49],[86,60],[17,60],[57,50],[13,45],[46,78],[61,72],[27,98],[52,62],[62,46],[20,21],[85,58],[47,73],[13,27],[26,63],[88,55],[41,64],[1,25],[99,86],[20,88],[86,3],[3,9],[65,0],[76,55],[38,56],[77,96],[49,39],[21,3],[38,30],[52,0],[22,89],[79,54],[54,29],[76,53],[3,90],[23,85],[47,83],[95,20],[31,34],[37,33],[51,53],[90,27],[94,82],[68,88],[48,40],[6,90],[99,14],[68,65],[4,67],[75,92],[23,99],[56,90],[79,18],[79,14],[48,66],[45,3],[21,62],[68,87],[50,56],[19,37],[83,67],[82,69],[33,83],[35,68],[29,36],[22,3],[91,34],[70,73],[18,37],[25,12],[96,37],[1,73],[18,44],[9,80],[2,54],[40,14],[60,62],[8,27],[50,81],[97,7],[55,83],[32,87],[94,69],[4,65],[57,97],[9,62],[82,7],[0,17],[40,19],[24,79],[53,19],[11,63],[24,89],[58,55],[13,63],[68,32],[23,91],[17,19],[65,99],[43,5],[16,42],[20,59],[12,75],[35,32],[86,76],[66,60],[38,63],[45,94],[16,33],[97,6],[60,42],[79,64],[60,15],[24,37],[81,41],[49,8],[75,94],[89,54],[55,46],[38,21],[0,10],[90,72],[61,88],[62,73],[63,9],[33,86],[25,62],[61,52],[89,98],[99,53],[54,19],[54,80],[54,83],[67,38],[87,66],[49,79],[50,6],[72,4],[58,53],[2,40],[9,0],[83,97],[33,64],[26,12],[59,87],[78,2],[48,42],[59,69],[32,82],[28,77],[7,66],[45,37],[64,85],[31,17],[58,34],[13,6],[64,28],[44,30],[39,79],[69,39],[61,44],[1,24],[43,33],[64,94],[70,92],[54,7],[70,41],[61,26],[11,80],[24,85],[78,84],[66,13],[98,13],[4,93],[73,6],[6,82],[3,12],[12,13],[56,10],[78,30],[59,41],[15,66],[62,29],[84,56],[40,88],[17,82],[54,67],[43,55],[92,65],[98,91],[39,46],[11,33],[50,16],[58,86],[65,81],[38,55],[99,60],[19,85],[9,95],[98,34],[54,84],[52,58],[97,84],[56,1],[1,27],[33,32],[3,92],[60,11],[25,56],[13,60],[74,92],[58,51],[43,14],[66,59],[27,60],[75,86],[48,53],[91,8],[67,41],[41,21],[93,85],[65,57],[53,67],[51,45],[25,97],[41,7],[64,1],[23,4],[83,28],[29,75],[68,6],[11,37],[30,89],[75,50],[82,67],[64,86],[77,23],[92,54],[81,64],[68,46],[45,9],[61,81],[52,87],[76,36],[54,5],[67,87],[62,57],[81,25],[78,62],[54,74],[9,14],[12,46],[38,44],[36,13],[99,27],[51,76],[40,68],[26,67],[42,65],[44,21],[59,46],[14,62],[35,61],[46,99],[61,50],[60,90],[26,80],[20,40],[19,8],[7,74],[1,92],[41,71],[7,93],[22,2],[44,11],[15,28],[42,45],[14,88],[19,23],[98,19],[2,1],[73,2],[9,23],[17,70],[8,3],[97,41],[29,87],[46,77],[88,52],[34,46],[87,4],[67,75],[50,76],[44,82],[75,55],[58,69],[70,75],[18,81],[75,83],[16,25],[79,31],[96,98],[72,12],[97,35],[66,1],[16,73],[39,81],[3,57],[68,69],[9,87],[31,38],[16,76],[51,3],[68,53],[27,70],[81,67],[43,87],[44,81],[77,97],[2,28],[10,4],[46,3],[23,44],[24,69],[47,93],[96,4],[39,26],[64,57],[11,12],[18,38],[9,85],[32,93],[77,22],[75,66],[83,99],[64,82],[76,61],[96,18],[35,1],[62,30],[35,39],[61,65],[67,24],[84,47],[5,52],[64,98],[15,8],[9,16],[50,2],[13,76],[17,89],[65,40],[16,40],[72,73],[14,47],[31,15],[65,44],[99,63],[13,64],[15,58],[96,3],[58,31],[11,22],[20,10],[15,49],[91,24],[37,43],[30,13],[93,88],[64,43],[33,89],[7,67],[91,3],[77,14],[13,74],[55,27],[73,30],[39,43],[0,44],[80,51],[22,37],[23,54],[16,71],[16,22],[12,82],[65,35],[96,57],[91,71],[6,10],[97,44],[97,91],[53,96],[52,82],[52,10],[50,72],[12,30],[84,80],[34,75],[27,51],[33,8],[81,69],[27,93],[77,85],[61,13],[3,77],[48,52],[65,28],[82,77],[85,90],[75,60],[47,53],[35,94],[29,56],[80,63],[20,47],[70,65],[97,51],[60,45],[31,25],[68,20],[39,71],[45,35],[74,26],[52,64],[43,22],[35,4],[24,29],[82,62],[55,87],[44,58],[72,55],[88,9],[65,97],[26,28],[87,37],[19,52],[34,9],[77,17],[41,15],[65,50],[84,45],[64,39],[38,70],[76,65],[71,24],[57,27],[29,72],[3,35],[90,23],[18,80],[38,90],[93,70],[41,3],[89,47],[86,91],[98,71],[71,76],[94,58],[58,57],[77,20],[61,69],[4,74],[6,19],[36,97],[5,44],[33,54],[21,45],[78,73],[79,13],[83,13],[27,43],[52,41],[56,27],[41,92],[71,44],[5,69],[22,75],[70,9],[13,91],[40,25],[63,56],[86,79],[14,54],[67,71],[23,8],[49,87],[57,92],[19,61],[53,0],[40,74],[68,55],[76,70],[72,44],[4,50],[63,51],[7,33],[35,9],[96,32],[84,17],[20,3],[41,82],[92,26],[84,44],[0,61],[78,31],[63,32],[57,22],[79,23],[74,56],[71,26],[81,56],[81,33],[30,1],[5,71],[86,13],[79,27],[63,17],[55,93],[68,92],[30,83],[8,67],[47,10],[82,46],[2,85],[49,76],[87,79],[23,28],[65,63],[81,51],[18,20],[1,14],[14,80],[74,82],[71,97],[9,39],[3,32],[2,55],[4,47],[82,43],[9,2],[66,72],[22,70],[51,12],[52,40],[43,6],[85,12],[86,48],[22,68],[13,78],[97,22],[24,35],[34,4],[56,72]]
         *
         * @param args
         */
        public static void main(String[] args) {
            _4th handler = new _4th();
            int[] scores = {5, 2, 9, 8, 4};
            int[][] edges = {{0, 1}, {1, 2}, {2, 3}, {0, 2}, {1, 3}, {2, 4}};
            handler.maximumScore(scores, edges);
        }


        public int maximumScore(int[] scores, int[][] edges) {
            //建图
            List<List<Integer>> graph = new ArrayList<>();
            int n = scores.length;
            for (int i = 0; i < n; i++) graph.add(new ArrayList<>());
            for (int[] e : edges) {
                graph.get(e[0]).add(e[1]);
                graph.get(e[1]).add(e[0]);
            }
            //
            int maxx = -1;
            for (int i = 0; i < n; i++) {
                boolean[] vis = new boolean[n];
                List<List<Integer>> res = new ArrayList<>();
                dfs(graph, vis, i, 4, new ArrayList<>(), res);
                for (List<Integer> sub : res) {
                    int sum = 0;
                    for (int x : sub) sum += scores[x];
                    maxx = Math.max(maxx, sum);
//                    System.out.printf("%d -> %s\n", sum, JSON.toJSONString(sub));
                }
//                System.out.println("");
            }
            return maxx;
        }

        private void dfs(List<List<Integer>> graph, boolean[] vis, int u, int k, List<Integer> sub, List<List<Integer>> res) {
            sub.add(u);
            vis[u] = true;
            if (sub.size() == k) {
                res.add(new ArrayList<>(sub));
                return;
            }
            for (int v : graph.get(u)) {
                if (vis[v]) continue;
                dfs(graph, vis, v, k, sub, res);
                sub.remove(sub.size() - 1);
                vis[v] = false;
            }

        }
    }


    static class _4th_1 {

        public static void main(String[] args) {
            _4th_1 handler = new _4th_1();
            int[] scores = {5, 2, 9, 8, 4};
            int[][] edges = {{0, 1}, {1, 2}, {2, 3}, {0, 2}, {1, 3}, {2, 4}};
            handler.maximumScore(scores, edges);
        }

        public int maximumScore(int[] scores, int[][] edges) {
            int n = scores.length;
            List<int[]>[] graph = new List[n];
            for (int i = 0; i < n; i++) graph[i] = new ArrayList<>();
            for (int[] e : edges) {
                int u = e[0], v = e[1];
                graph[u].add(new int[]{scores[v], v});
                graph[v].add(new int[]{scores[u], u});
            }
            for (int i = 0; i < n; i++) {
                if (graph[i].size() > 3) {
                    //按score倒序排列 排序取3个是关键 不可能以当前点的相邻的位置找3个点及以上的点
                    graph[i].sort((a, b) -> b[0] - a[0]);
                    graph[i] = new ArrayList<>(graph[i].subList(0, 3));
                }
            }
            int res = -1;
            //a - x - y - b
            for (int[] e : edges) {
                int x = e[0], y = e[1];
                for (int[] p : graph[x]) {
                    int a = p[1];
                    for (int[] q : graph[y]) {
                        int b = q[1];
                        if (a != y && b != x && a != b) {
                            res = Math.max(res, p[0] + scores[x] + scores[y] + q[0]);
                        }
                    }
                }
            }
            return res;
        }

    }

    static class _4th_2 {

        public static void main(String[] args) {
            _4th_2 handler = new _4th_2();
            int[] scores = {5, 2, 9, 8, 4};
            int[][] edges = {{0, 1}, {1, 2}, {2, 3}, {0, 2}, {1, 3}, {2, 4}};
            handler.maximumScore(scores, edges);
        }


        public int maximumScore(int[] scores, int[][] edges) {
            int n = scores.length;
            ArrayList<Integer>[] link = new ArrayList[n];
            for (int i = 0; i < n; i++) {
                link[i] = new ArrayList<Integer>();
            }
            for (int[] e : edges) {
                link[e[0]].add(e[1]);
                link[e[1]].add(e[0]);
            }
            for (int i = 0; i < n; i++) {
                link[i].sort((o1, o2) -> Integer.compare(scores[o2], scores[o1]));
            }
            int max = -1;
            for (int[] e : edges) {
                int t1 = Math.min(3, link[e[0]].size());
                int t2 = Math.min(3, link[e[1]].size());
                int v = scores[e[0]] + scores[e[1]];
                for (int i = 0; i < t1; i++) {
                    int x = link[e[0]].get(i);
                    if (x == e[1]) continue;
                    for (int j = 0; j < t2; j++) {
                        int y = link[e[1]].get(j);
                        if (y == x || y == e[0]) continue;
                        max = Math.max(v + scores[x] + scores[y], max);
                    }
                }
            }
            return max;
        }
    }

}
